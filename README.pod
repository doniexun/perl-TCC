=head1 NAME

C::TinyCompiler - Full C JIT compiling using the Tiny C Compiler

These are Perl bindings to the Tiny C Compiler (TCC). TCC is a very fast, very 
small, and nearly compliant C-99 compiler. Some benchmarks claim that TCC
compiles 7x faster than GCC. TCC does not apply the same sorts of optimizations
as GCC, mind you, but it still compiles to machine code. Another important
feature of TCC is that it can compile a string of C code to machine code
without writing to file. In other words, it can be used as a Just In Time
C compiler!

If you do not yet see my point, then consider this: Perl has excellent string
manipulation facilities. By combining Perl's ability to manipulate strings and
TCC's ability to quickly compile C code, we have an easy, fast way to
dynamically generate machine code. Perl's bytecode is fast, of course, but for
certain numerical work, this can lead to operations that are orders of magnitude
faster.

(Though, admitedly, I don't yet have the benchmarks to prove my point.)

=head1 INSTALLATION

To begin, you will need to have a working copy of the Tiny C Compiler (i.e.
tcc) in your path. To get that, visit
L<http://download.savannah.gnu.org/releases/tinycc/>. I would like to
wrap these install steps into an Alien module, but I just haven't gotten
there yet.

=head2 Linuxish TCC Installation

For unixish systems, including Mac and Cygwin, unzip the bz2 file and
C<chdir> into directory. With an install prefix in mind, use the
following configure:

    # Linux (maybe other Unixen?)
    ./configure --prefix=<install-location>
    
    # Cygwin
    ./configure --enable-cygwin --prefix=<install-location>
    
    # Mac
    ./configure --cpu=x86-64 --prefix=<install-location>

Then follow the usual steps:

    make
    make install

=head2 Windows Installation

The Windows installation is a little trickier than I had hoped at the
moment. Unfortunately, you must build from source, either by unpacking
the .bz2 file or cloning from the git repo. Then C<chdir> into the
F<win32> directory of the source tarball and run C<build-tcc>, a DOS
batch script. When that completes, copy all of the files and
subdirectories of F<win32> (except for the batch script and the readme
file) into a directory that is in your C<%PATH%>. For example, if you
are using Strawberry Perl and installed it to the conventional
location, then F<C:\strawberry\c\bin> should be in your path. Thus you
should copy the files there, and after copying you should have these
files:

 C:\strawberry\c\bin\tcc.exe
 C:\strawberry\c\bin\libtcc.dll
 ...
 C:\strawberry\c\bin\include\inttypes.h
 ...
 C:\strawberry\c\bin\lib\libtcc1.a
 ...

Unfortunately, installing froom the precompiled binaries doesn't quite
work at the moment. Expect all of this to go away in the near future,
hopefully by way of an C<Alien::TCC> package.

=head2 Installing C::TinyCompiler

To install this module, download the contents from the Github repo
(L<https://github.com/run4flat/perl-TCC>) or from L<CPAN.org> and run:

	perl Build.PL
	./Build
	./Build test
	./Build install

=head1 SUPPORT AND DOCUMENTATION

After installing, you can find documentation for this module with the
perldoc command.

    perldoc C::TinyCompiler

You can also look for information at:

=over 4

=item * The Github issue tracker (report bugs here)

L<http://github.com/run4flat/perl-TCC/issues>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/C-TinyCompiler>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/C-TinyCompiler>

=item * Search CPAN

L<http://p3rl.org/C::TinyCompiler>
L<http://search.cpan.org/dist/C-TinyCompiler/>

=back

AUTHOR AND COPYRIGHT

Written by David Mertens. Portions of this code are copyright 2011-2013
Northwestern University. Portions of this code are copyright 2013
Dickinson College.

LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

